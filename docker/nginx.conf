user  nginx;
worker_processes 4;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 512;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$http_accept"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    gzip  on;
    gzip_proxied any;
    gzip_vary on;

    proxy_cache_path /var/cache/nginx/proxy_cache keys_zone=lens:10m;

    server {
        listen       80;
        server_name  localhost;

        root /usr/share/nginx/html/;

        location / {
            try_files $uri /index.html;
            charset utf-8;
        }

        location /auth {
            proxy_pass http://<lens-auth>;
        }

        location /wb {
            proxy_pass http://<lens-workbook>;
            proxy_cache lens;
            proxy_cache_bypass $http_cache_control;
            add_header X-Proxy-Cache $upstream_cache_status;
        }

        location /wh {
            proxy_pass http://<lens-warehouse>;
            proxy_cache lens;
            proxy_cache_bypass $http_cache_control;
            add_header X-Proxy-Cache $upstream_cache_status;
        }

        location /report {
            proxy_pass <lens-report-uri>;
            proxy_cache lens;
            proxy_cache_bypass $http_cache_control;
            add_header X-Proxy-Cache $upstream_cache_status;
        }

        location /acrf {
            proxy_pass <lens-acrf-uri>;
            proxy_cache lens;
            proxy_cache_bypass $http_cache_control;
            add_header X-Proxy-Cache $upstream_cache_status;
        }

        location ~ \.(css|js)$ {
            expires max;
            add_header Pragma "public";
            add_header Cache-Control "public";
        }
    }
}
